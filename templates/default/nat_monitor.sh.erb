#!/bin/bash
# This script will monitor another NAT instance and take over its routes
# if communication with the other instance fails

# Based on script downloaded from:
# http://media.amazonwebservices.com/articles/nat_monitor_files/nat_monitor.sh
# Modified to work without fixed paths

# NAT instance variables
# Other instance's route to monitor and grab if other node goes down
NAT_RT_ID=<%= @partner_route %>

# My route to grab when I come back up
My_RT_ID=<%= @my_route %>

# Specify the EC2 region that this will be running in (e.g. https://ec2.us-east-1.amazonaws.com)
EC2_URL=<%= @ec2_url %>

# Health Check variables
Num_Pings=5
Ping_Timeout=3
Wait_Between_Pings=5
Wait_for_Instance_Stop=60
Wait_for_Instance_Start=300

# Run aws-apitools-common.sh to set up default environment variables and to
# leverage AWS security credentials provided by EC2 roles
if [ -f /etc/profile.d/aws-apitools-common.sh ]; then
 . /etc/profile.d/aws-apitools-common.sh
fi

# Determine the NAT instance private IP so we can ping the other NAT instance, take over
# its route, and reboot it.  Requires EC2 DescribeInstances, ReplaceRoute, and Start/RebootInstances
# permissions.  The following example EC2 Roles policy will authorize these commands:
# {
#  "Statement": [
#    {
#      "Action": [
#        "ec2:DescribeRouteTables",
#        "ec2:DescribeInstances",
#        "ec2:CreateRoute",
#        "ec2:ReplaceRoute",
#        "ec2:StartInstances",
#        "ec2:StopInstances"
#      ],
#      "Effect": "Allow",
#      "Resource": "*"
#    }
#  ]
# }
#
# Note: configure-pat.sh requires "ec2:ModifyInstanceAttribute" on top of the permissions listed above
#       in order to disable the source/destination checks.

# Get this instance's ID
Instance_ID=`/usr/bin/curl --silent http://169.254.169.254/latest/meta-data/instance-id`

echo `date` "-- Starting NAT monitor"
echo `date` "-- Adding this instance to $My_RT_ID default route on start"
ec2-replace-route $My_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL
# If replace-route failed, then the route might not exist and may need to be created instead
if [ "$?" != "0" ]; then
  ec2-create-route $My_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL
fi

# Get the instance ID of the currently assigned partner instance
NAT_ID=`ec2-describe-route-tables -U https://ec2.eu-west-1.amazonaws.com $NAT_RT_ID | grep 0.0.0.0/0 -m 1 | awk '{print $2;}'`

# Get its IP
NAT_IP=`ec2-describe-instances $NAT_ID -U $EC2_URL | grep PRIVATEIPADDRESS -m 1 | awk '{print $2;}'`

# If the partner route is currently controlled by this very own instance, then there is no point in doing a health check
if [ "$Instance_ID" == "$NAT_ID" ]; then
  echo `date` "-- Exiting since route $NAT_RT_ID is already managed by this instance. Will re-check on the next configure lifecycle event."
  exit 0
else
  echo `date` "-- Starting to monitor partner $NAT_ID / $NAT_IP"
fi

while [ . ]; do
  # Check health of other NAT instance
  pingresult=`ping -c $Num_Pings -W $Ping_Timeout $NAT_IP | grep time= | wc -l`
  # Check to see if any of the health checks succeeded, if not
  if [ "$pingresult" == "0" ]; then
    # Set HEALTHY variables to unhealthy (0)
    ROUTE_HEALTHY=0
    NAT_HEALTHY=0
    STOPPING_NAT=0
    while [ "$NAT_HEALTHY" == "0" ]; do
      # NAT instance is unhealthy, loop while we try to fix it
      if [ "$ROUTE_HEALTHY" == "0" ]; then
        echo `date` "-- Other NAT heartbeat failed, taking over $NAT_RT_ID default route"
        ec2-replace-route $NAT_RT_ID -r 0.0.0.0/0 -i $Instance_ID -U $EC2_URL
        ROUTE_HEALTHY=1
      fi
      <% if @reboot_failed_partner %>
      # Check NAT state to see if we should stop it or start it again
      # This sample script works well with EC2 API tools version 1.6.12.2 2013-10-15.
      # If you are using a different version and your script is stuck at NAT_STATE, please modify
      # the script to "print $5;" instead of "print $4;".
      NAT_STATE=`ec2-describe-instances $NAT_ID -U $EC2_URL | grep INSTANCE | awk '{print $5;}'`
      if [ "$NAT_STATE" == "stopped" ]; then
        echo `date` "-- Other NAT instance stopped, starting it back up"
        ec2-start-instances $NAT_ID -U $EC2_URL
        NAT_HEALTHY=1
        sleep $Wait_for_Instance_Start
      else
        if [ "$STOPPING_NAT" == "0" ]; then
          echo `date` "-- Other NAT instance $NAT_STATE, attempting to stop for reboot"
          ec2-stop-instances $NAT_ID -U $EC2_URL
          STOPPING_NAT=1
        fi
        sleep $Wait_for_Instance_Stop
      fi
      <% else %>
      # Assume instance is restarted elsewhere, e.g. manually or via OpsWorks auto-healing
      echo `date` "-- Exiting since $NAT_RT_ID is now managed by this instance. Will re-check on the next configure lifecycle event."
      exit 0
      <% end %>
    done
  else
    sleep $Wait_Between_Pings
  fi
done
